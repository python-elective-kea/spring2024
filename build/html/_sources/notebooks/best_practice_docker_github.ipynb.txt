{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Working in teams with Docker and github"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Build new image before each container run\n",
    "In this first approach we build a new image with the requirements installed at build time.     \n",
    "From this image you can then run a container with the up to date requirements installed.    \n",
    "This means you will need to build a new docker image and run a container based on that image each time you do a pull from your groups github repository.    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In your repository you will need your \n",
    "\n",
    "* **code**\n",
    "* a **Dockerfile**, and a \n",
    "* **requirements.txt** file"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your Docker file should look something like this:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dockerfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````\n",
    "# the base image\n",
    "FROM python:3.8-alpine\n",
    "\n",
    "# copy all files from dir with Dockerfile and requirements.txt to /app folder in image\n",
    "COPY . /app\n",
    "\n",
    "# cd into /app folder with (in this case only) the requirements.txt\n",
    "WORKDIR /app\n",
    "\n",
    "# install python modules\n",
    "RUN pip install -r requirements.txt\n",
    "\n",
    "# Change into / as startingpoint of container\n",
    "WORKDIR /\n",
    "\n",
    "# when container runs it should start in a ash terminal\n",
    "CMD [\"ash\"]\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your requirements.txt file should look something like this:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### requirements.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````\n",
    "certifi==2020.6.20\n",
    "chardet==3.0.4\n",
    "idna==2.10\n",
    "requests==2.24.0\n",
    "urllib3==1.25.10\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step by step  (pulling)  \n",
    "\n",
    "1. pull repository from github\n",
    "    * ````git pull```` \n",
    "2. build a new image from dockerfile\n",
    "    * ````docker build -t <<imagename>> .````\n",
    "3. remove the dangling image (the image you just have overwritten, and that is now named \\<none\\>)\n",
    "    * ````docker rmi $(docker images -f 'dangling=true' -q)````\n",
    "4. run your container\n",
    "    * ````docker run -it --rm -v ${PWD}:/docs <<imagename>>```` "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Step by step  (pushing)  \n",
    "\n",
    "1. in you container with the new requirements installed (pip install \\<\\<module\\>\\>) do a:\n",
    "    * ````pip freeze > requirements.txt```` \n",
    "2. push your code to gihub\n",
    "3. if or when you close your running container you will need to performe 2, 3, 4 from above"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Install requirements in container at run"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This second approach installs requirements in the container at container start instead of installing it in the image at build time.    \n",
    "This means that you only have to build the image once.    \n",
    "\n",
    "Your dockerfile has to change a bit."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dockerfile"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "````\n",
    "# the base image\n",
    "FROM python:3.8-alpine\n",
    "\n",
    "# copy all files from dir with Dockerfile and requirements.txt to /app folder in image\n",
    "COPY . /app\n",
    "\n",
    "# cd into /app folder with (in this case only) the requirements.txt\n",
    "WORKDIR /app\n",
    "\n",
    "# install python modules\n",
    "RUN pip install -r requirements.txt\n",
    "\n",
    "# Change into / as startingpoint of container\n",
    "# WORKDIR / \n",
    "# it is easiest to stay in the /app folder when you run the CMD below. (so thats why change to workdir is commented out.)\n",
    "\n",
    "############################################\n",
    "## Add this command. #######################\n",
    "## This will run as the first thing when ###\n",
    "## you run your container. #################\n",
    "\n",
    "# install modules listed in requirements.txt, and start the ash terminal\n",
    "CMD pip install -q -r requirements.txt & ash\n",
    "\n",
    "````"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your docker run command will look like this:     \n",
    "\n",
    "```` docker run -it --rm -v ${PWD}:/app <<imagename>> ````    \n",
    "\n",
    "note: we use the /app folder instead of /docs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Which method is best?\n",
    "Method number 2 are prefered during devolopment. This will eliminate the step of having to build a new image each time you need to run a container. On the other hand when the development phase is over, the first methods are prefered. This is because instalation of all requirements at container run is time consuming (even if there is no requirements updates) and it is unnessesary, since it can be done at image build instead. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

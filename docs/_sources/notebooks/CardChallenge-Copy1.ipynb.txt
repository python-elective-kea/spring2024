{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](../_static/card_chal.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Each card has a letter on one face and a number on the other face.  \n",
    "## Claim: If a card shows a vowel on one face, then its opposite face is an even number\n",
    "## Which card or cards must be turned over to test if this claim is true or false?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Think about this for 2 minutes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Possible solutions\n",
    "\n",
    "a og 7 -> 14\n",
    "a og 4 -> 3\n",
    "k -> 0\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Your job is  \n",
    "1. Make sure you understood the task\n",
    "2. Solve the challange\n",
    "3. Create an algorithm that for any 4 cards given can check if the cards can pass the test or not.\n",
    "\n",
    "Then you should implement the algoritm and code the solution in this **Jupyter Notebook**. You should focus on using a **pythonic** coding style, and you should focus on making your application **as fast as possible**.   \n",
    "* first create a function that can generate 4 cards with a uppercase letter on one side and a single digit number on the orher side. \n",
    "* Then populate a list with a given number of card sets. \n",
    "* run each card set through the algorithm\n",
    "* get the result of how many card sets passed the test and how many did not, and specify which set violated the rule."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. first create a function that can generate 4 cards with a uppercase letter on one side and a single digit number on the orher side. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "\n",
    "def generate():\n",
    "    cards = []\n",
    "    \n",
    "    for i in range(4):\n",
    "        s = random.choice(string.ascii_uppercase)\n",
    "        d = random.randrange(10)\n",
    "        r = random.randint(0,1)    \n",
    "        \n",
    "        if r == 0:\n",
    "            cards.append((s, d))\n",
    "        else:\n",
    "            cards.append((d, s))\n",
    "    \n",
    "    return tuple(cards)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(('G', 6), (5, 'I'), ('K', 7), ('E', 2))"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "generate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Google job questions\n",
    "[1, 2, 3, 9] = sum 8\n",
    "[1, 2, 4, 4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def has_pair_with_sum(l, sum):\n",
    "    low = 0\n",
    "    high = len(l) - 1\n",
    "    \n",
    "    while low < high:\n",
    "        s = l[low] + l[high]\n",
    "        \n",
    "        if s == sum:\n",
    "            return True\n",
    "        elif s > sum:\n",
    "            high = high - 1\n",
    "        elif s < sum:\n",
    "            low = low + 1\n",
    "            \n",
    "    return False\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "has_pair_with_sum([1, 2, 3, 9], 8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "has_pair_with_sum([1, 2,4, 4], 8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[12, 13, 45]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Card:\n",
    "    \n",
    "    testvariable = [12, 13, 45]\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.face = ['A', 'K']\n",
    "        self.number = [1, 2, 3, 4]\n",
    "        \n",
    "    def status(self):\n",
    "        return Card.testvariable \n",
    "    \n",
    "    \n",
    "\n",
    "card = Card()\n",
    "card.testvariable\n",
    "card.status()\n",
    "\n",
    "#card2 = Card()\n",
    "\n",
    "#card2.testvariable += [1, 2, 3] \n",
    "#card.testvariable\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

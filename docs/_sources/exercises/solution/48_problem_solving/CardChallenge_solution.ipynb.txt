{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](../../../_static/card_chal.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Each card has a letter on one face and a number on the other face.  \n",
    "## Claim: If a card shows a vowel on one face, then its opposite face is an even number\n",
    "## Which card or cards must be turned over to test if this claim is true or false? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Your job is  \n",
    "1. Make sure you understood the task\n",
    "2. Solve the challange\n",
    "3. Create an algorithm that for any 4 cards given can check if the cards can pass the test or not.\n",
    "\n",
    "Then you should implement the algoritm and code the solution in this **Jupyter Notebook**. You should focus on using a **pythonic** coding style, and you should focus on making your application **as fast as possible**.   \n",
    "* first create a function that can generate 4 cards with an uppercase letter on one side and a single digit number on the orher side. \n",
    "* Then populate a list with a given number of card sets. \n",
    "* run each card set through the algorithm\n",
    "* get the result of how many card sets passed the test and how many did not, and specify which set violated the rule."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate a card set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "def generate():\n",
    "    cards = []\n",
    "    \n",
    "    for i in range(4):\n",
    "        s = random.choice(string.ascii_uppercase)\n",
    "        d = random.randint(1, 9)\n",
    "        r = random.randint(0, 1)\n",
    "        \n",
    "        if r == 0:\n",
    "            cards.append((s, d))\n",
    "        else:\n",
    "            cards.append((d, s))\n",
    "    \n",
    "    return  tuple(cards)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Populate a list with card sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def populate(func, n):\n",
    "    l = []\n",
    "    for _ in range(n):\n",
    "        l.append(func())\n",
    "    return l\n",
    "\n",
    "x = populate(generate, 10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[((('U', 9), (3, 'I'), (5, 'V'), (8, 'M')), False, ('U', 9)),\n",
       " ((('Y', 2), (8, 'G'), ('C', 5), ('L', 5)), True),\n",
       " ((('S', 3), ('G', 3), ('A', 7), (9, 'T')), False, ('A', 7)),\n",
       " ((('J', 1), ('Z', 7), ('M', 9), (6, 'Q')), True),\n",
       " ((('T', 4), ('P', 5), (6, 'X'), (6, 'U')), True),\n",
       " ((('Q', 4), (1, 'P'), (3, 'W'), (7, 'O')), False, (7, 'O')),\n",
       " (((4, 'H'), (3, 'P'), ('R', 9), ('T', 8)), True),\n",
       " ((('L', 8), ('I', 5), ('Y', 2), ('P', 9)), False, ('I', 5)),\n",
       " (((1, 'G'), (4, 'E'), (4, 'T'), ('M', 9)), True),\n",
       " (((6, 'T'), (5, 'X'), (7, 'J'), ('M', 2)), True)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# if a card has a Vowel then we have to turn it\n",
    "# if a card has a odd number we have to turn it\n",
    "\n",
    "def check(l):\n",
    "    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n",
    "    check = []\n",
    "    \n",
    "    for i in l:\n",
    "        flag = False\n",
    "        for j in i:\n",
    "            if j[0] in vowels and j[1] % 2 == 1:       # a vowel and an odd number\n",
    "                check.append((i, False, j))\n",
    "                flag = True\n",
    "                break\n",
    "            elif type(j[0]) == int and j[0]%2 == 1 and j[1] in vowels:  # an odd number and a vowel\n",
    "                check.append((i, False, j))\n",
    "                flag = True\n",
    "                break\n",
    "        if not flag:\n",
    "            check.append((i, True))\n",
    "   \n",
    "    return check\n",
    "  \n",
    "check(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
